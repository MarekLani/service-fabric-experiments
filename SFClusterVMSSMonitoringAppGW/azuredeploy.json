{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "Cluster",
      "metadata": {
        "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
      }
    },
    "nt0applicationStartPort": {
      "type": "int",
      "defaultValue": 20000
    },
    "nt0applicationEndPort": {
      "type": "int",
      "defaultValue": 30000
    },
    "nt0ephemeralStartPort": {
      "type": "int",
      "defaultValue": 49152
    },
    "nt0ephemeralEndPort": {
      "type": "int",
      "defaultValue": 65534
    },
    "nt0fabricTcpGatewayPort": {
      "type": "int",
      "defaultValue": 19000
    },
    "nt0fabricHttpGatewayPort": {
      "type": "int",
      "defaultValue": 19080
    },
    "nt0reverseProxyEndpointPort": {
      "type": "int",
      "defaultValue": 19081
    },
    "loadBalancedAppPort1": {
      "type": "int",
      "defaultValue": 8080,
      "metadata": {
        "description": "Input endpoint1 for the application to use. Replace it with what your application uses"
      }
    },
    "loadBalancedAppPort2": {
      "type": "int",
      "defaultValue": 8081,
      "metadata": {
        "description": "Input endpoint2 for the application to use. Replace it with what your application uses"
      }
    },
    "loadBalancedAppPort3": {
      "type": "int",
      "defaultValue": 8082,
      "metadata": {
        "description": "Input endpoint3 for the application to use. Replace it with what your application uses"
      }
    },
    "computeLocation": {
      "type": "string",
      "allowedValues": [
        "East Asia",
        "Southeast Asia",
        "Central US",
        "East US",
        "East US 2",
        "West US",
        "North Central US",
        "South Central US",
        "North Europe",
        "West Europe",
        "Japan West",
        "Japan East",
        "Brazil South",
        "Canada Central",
        "Canada East",
        "West Central US",
        "West US 2"
      ],
      "metadata": {
        "description": "Select the location for your SF resources"
      }
    },
    "vmStorageAccountName": {
      "type": "string",
      "defaultValue": "sf",
      "metadata": {
        "description": "Specify the storage account name suffix"
      }
    },
    "vmStorageAccountContainerName": {
      "type": "string",
      "defaultValue": "vhds"
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "description": "Remote desktop user Id"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Remote desktop user password. Must be a strong password"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "VNet",
      "metadata": {
        "description": "Name of your virtual network"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/16",
      "metadata": {
        "description": "specify vNet address prefix"
      }
    },
    "subnet0Name": {
      "type": "string",
      "defaultValue": "Subnet-Default",
      "metadata": {
        "description": "Specify the subnet name"
      }
    },
    "subnet0Prefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/24",
      "metadata": {
        "description": "Specify the subnet prefix"
      }
    },
    "subnetGWName": {
      "type": "string",
      "defaultValue": "Subnet-GW",
      "metadata": {
        "description": "Specify the subnet name"
      }
    },
    "subnetGWPrefix": {
      "type": "string",
      "defaultValue": "10.10.1.0/24",
      "metadata": {
        "description": "Specify the subnet prefix"
      }
    },
    "subnetVPNName": {
      "type": "string",
      "defaultValue": "GatewaySubnet",
      "metadata": {
        "description": "Specify the subnet name - name must be GatewaySubnet"
      }
    },
    "subnetVPNPrefix": {
      "type": "string",
      "defaultValue": "10.10.2.0/24",
      "metadata": {
        "description": "Specify the subnet prefix"
      }
    },
    "applicationGatewayName": {
      "type": "string",
      "defaultValue": "AppGW-0",
      "metadata": {
        "description": "Specify the Application Gateway name"
      }
    },
    "applicationGatewayTier": {
      "type": "string", // Standard
      "defaultValue": "Standard",
      "metadata": {
        "description": "Specify Application Gateway tier"
      }
    },
    "applicationGatewaySkuSize": {
      "type": "string", //Standard_Medium
      "defaultValue": "Standard_Medium",
      "metadata": {
        "description": "Specify Application Gateway SKU"
      }
    },
    "applicationGatewayCapacity": {
      "type": "int",
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "defaultValue": 2
    },
    "nicName": {
      "type": "string",
      "defaultValue": "NIC",
      "metadata": {
        "description": "Specify a name for the vNIC resource"
      }
    },
    "lbName": {
      "type": "string",
      "defaultValue": "LoadBalancer",
      "metadata": {
        "description": "Specify a name for the Load Balancer"
      }
    },
    "apgwIPName": {
      "type": "string",
      "defaultValue": "PublicIP-AGW"
    },
    "overProvision": {
      "type": "string",
      "defaultValue": "false"
    },
    "vmImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer"
    },
    "vmImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer"
    },
    "vmImageSku": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter"
    },
    "vmImageVersion": {
      "type": "string",
      "defaultValue": "latest"
    },
    "storageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the VM image storage account"
      }
    },
    "supportLogStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Replication option for the support log storage account"
      }
    },
    "vmNodeType0Name": {
      "type": "string",
      "defaultValue": "omssf",
      "maxLength": 9
    },
    "vmNodeType0Size": {
      "type": "string",
      "defaultValue": "Standard_D1_v2"
    },
    "omsWorkspacename": {
      "type": "string",
      "metadata": {
        "description": "Name of your OMS Log Analytics Workspace"
      }
    },
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of your Application Insights"
      }
    },
    "omsRegion": {
      "type": "string",
      "defaultValue": "West Europe",
      "allowedValues": [
        "West Europe",
        "East US",
        "Southeast Asia"
      ],
      "metadata": {
        "description": "Specify the Azure Region for your OMS workspace"
      }
    },
    "appInsightsRegion": {
      "type": "string",
      "defaultValue": "West Europe",
      "allowedValues": [
        "West Europe",
        "East US",
        "Southeast Asia"
      ],
      "metadata": {
        "description": "Specify the Azure Region for your App Insights"
      }
    },
    "servicefabricSolution": {
      "type": "string",
      "defaultValue": "ServiceFabric"
    },
    "securitySolution": {
      "type": "string",
      "defaultValue": "Security"
    },
    "gatewayName": {
      "type": "string",
      "defaultValue":  "VPNGateway",
      "metadata": {
        "description": "The name of the VirtualNetworkGateway."
      }
    },
    "gatewayPublicIPName": {
      "type": "string",
      "defaultValue":  "VPNIP",
      "metadata": {
        "description": "The name of the PublicIP attached to the VirtualNetworkGateway."
      }
    },
    "gatewaySku": {
      "type": "string",
      "defaultValue": "Basic",
      "metadata": {
        "description": "The Sku of the Gateway. This must be one of Basic, Standard or HighPerformance."
      }
    },
    "vpnClientAddressPoolPrefix": {
      "type": "string",
      "defaultValue": "10.100.0.0/24",
      "metadata": {
        "description": "The IP address range from which VPN clients will receive an IP address when connected. Range specified must not overlap with on-premise network."
      }
    },
    "clientRootCertName": {
      "type": "string",
      "defaultValue": "RootCert1",
      "metadata": {
        "description": "The name of the client root certificate used to authenticate VPN clients. This is a common name used to identify the root cert."
      }
    },
    "clientRootCertData": {
      "type": "string",
      "defaultValue": "MIIC5zCCAc+gAwIBAgIQE6mqUPntLbhI7xYn8FWGKzANBgkqhkiG9w0BAQsFADAWMRQwEgYDVQQDDAtQMlNSb290Q2VydDAeFw0xNzA5MTIwNjI3MzNaFw0xODA5MTIwNjQ3MzNaMBYxFDASBgNVBAMMC1AyU1Jvb3RDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1gBHkxhaJJnNyA3Gfku91Mk3hndXsgzRwIsHT3zMCiR1kvYmKD5mUkmAYieCnEstpuBm+5F0Z07yMWegc90umMZ5ih4AN2zEWtfteuHcVcrrvPWrodRPcVjVOEG3t1sWmd5wnedzqH+nTi8GWqDTpwyU+M8X7VMFbyfrDWP7VCgNyzYFUPrBSy3Q+Eg5iHZl4tieO4Lu8yTvtZNdesCMm1nwNJroL+04LA+umalNo0B7q6sKOAlUaJwTq2brAKOEaJJvmZff8r8QFwG+L6LoPXmBSxrBnmK5ZMOFSzw/XbpREQAeA4qzrQFXJfxJeXTbyRtDHCEC7WWEmJnBI6hxJQIDAQABozEwLzAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFG5Vf1SQHH/jkaH9XSJeohKlAwITMA0GCSqGSIb3DQEBCwUAA4IBAQB+NZhdvuBCcBrvdLbHcZ9UjVLwRqHVVXTIgCx3jD5C4Vwo/dOfRsGC0xouAtZbOwTk4cOmjHZ74gW+I52Ply2Evh2ULeuJtwdltTU3VlRJKWMoCtk2ZzcmU2C0kwXtBPAgYYxmMN5qQDojxLy6U20XdY+HsZkzvtESsjiYV6k8hg3mxpE2mqFaQvAVbSjno/vnGjoY/znm5HgAoT+opcp5fwUWq3RlwtM8N/S9O2RnLsDng7OPE3NMkdm971DkWYOHAsrvrisf/P9MNwgXcWSt7GjAmXEz8Lj7FVsUUSgl2KTQn+J9zRfQb5RpbZhXZaajrRx4XWgyby+qpoYhPKcL",
      "metadata": {
        "description": "Client root certificate data used to authenticate VPN clients."
      }
    },
    "revokedCertName": {
      "type": "string",
      "defaultValue": "RevokedCert1",
      "metadata": {
        "description": "The name of revoked certificate, if any. This is a common name used to identify a given revoked certificate."
      }
    },
    "revokedCertThumbprint": {
      "type": "string",
      "defaultValue": "633EBFFBD01B6049D61E3CF059CFD940C8CE5780",
      "metadata": {
        "description": "Thumbprint of the revoked certificate. This would revoke VPN client certificates matching this thumbprint from connecting to the VNet."
      }
    }
  },
  "variables": {
    "supportLogStorageAccountName": "[toLower( concat('oms', uniqueString(resourceGroup().id),'2'))]",
    "applicationDiagnosticsStorageAccountType": "Standard_LRS",
    "applicationDiagnosticsStorageAccountName": "[toLower(concat(uniqueString(resourceGroup().id), '3' ))]",
    "solution": "[Concat(parameters('servicefabricSolution'), '(', parameters('omsWorkspacename'), ')')]",
    "solutionsecurity": "[concat(parameters('securitySolution'), '(', parameters('omsWorkspacename'), ')')]",
    "vmssApiVersion": "2016-03-30",
    "omsApiVersion": "2015-11-01-preview",
    "lbApiVersion": "2015-06-15",
    "vNetApiVersion": "2015-06-15",
    "storageApiVersion": "2015-06-15",
    "publicIPApiVersion": "2015-06-15",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
    "subnet0Ref": "[concat(variables('vnetID'),'/subnets/',parameters('subnet0Name'))]",
    "appgwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses/', parameters('apgwIPName'))]",
    "appgwSubnetRef": "[concat(variables('vnetID'), '/subnets/', parameters('subnetGWName'))]",
    "appgwApplicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]",
    "lbID0": "[resourceId('Microsoft.Network/loadBalancers', concat('LB','-', parameters('clusterName'),'-',parameters('vmNodeType0Name')))]",
    "lbIPConfig0": "[concat(variables('lbID0'),'/frontendIPConfigurations/LoadBalancerIPConfig')]",
    "lbPoolID0": "[concat(variables('lbID0'),'/backendAddressPools/LoadBalancerBEAddressPool')]",
    "lbProbeID0": "[concat(variables('lbID0'),'/probes/FabricGatewayProbe')]",
    "lbHttpProbeID0": "[concat(variables('lbID0'),'/probes/FabricHttpGatewayProbe')]",
    "lbNatPoolID0": "[concat(variables('lbID0'),'/inboundNatPools/LoadBalancerBEAddressNatPool')]",
    "frontEndIPConfigID": "[concat(variables('lbID0'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "vmStorageAccountName0": "[toLower(concat(uniqueString(resourceGroup().id), '1', '0' ))]",
    "gatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/',parameters('subnetVPNName'))]",
    "uniqueStringArray0": [
      "[concat(variables('vmStorageAccountName0'), '0')]",
      "[concat(variables('vmStorageAccountName0'), '1')]",
      "[concat(variables('vmStorageAccountName0'), '2')]",
      "[concat(variables('vmStorageAccountName0'), '3')]",
      "[concat(variables('vmStorageAccountName0'), '4')]"
    ]
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('gatewayPublicIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[parameters('gatewayName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('gatewayPublicIPName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gatewaySubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('gatewayPublicIPName'))]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "[parameters('gatewaySku')]",
          "tier": "[parameters('gatewaySku')]"
        },
        "gatewayType": "Vpn",
        "vpnType": "RouteBased",
        "enableBgp": "false",
        "vpnClientConfiguration": {
          "vpnClientAddressPool": {
            "addressPrefixes": [
              "[parameters('vpnClientAddressPoolPrefix')]"
            ]
          },
          "vpnClientRootCertificates": [
            {
              "name": "[parameters('clientRootCertName')]",
              "properties": {
                "PublicCertData": "[parameters('clientRootCertData')]"
              }
            }
          ],
          "vpnClientRevokedCertificates": [
            {
              "name": "[parameters('revokedCertName')]",
              "properties": {
                "Thumbprint": "[parameters('revokedCertThumbprint')]"
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('supportLogStorageAccountName')]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "accountType": "[parameters('supportLogStorageAccountType')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('applicationDiagnosticsStorageAccountName')]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "accountType": "[variables('applicationDiagnosticsStorageAccountType')]"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('vNetApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnet0Name')]",
            "properties": {
              "addressPrefix": "[parameters('subnet0Prefix')]"
            }
          },
          {
            "name": "[parameters('subnetGWName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetGWPrefix')]"
            }
          },
          {
            "name": "[parameters('subnetVPNName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetVPNPrefix')]"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('publicIPApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('apgwIPName')]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "name": "[parameters('applicationGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('apgwIPName'))]",
        "[concat('Microsoft.Network/loadBalancers/','LB','-', parameters('clusterName'),'-',parameters('vmNodeType0Name'))]"
      ],
      "properties": {
        "sku": {
          "name": "[parameters('applicationGatewaySkuSize')]",
          "tier": "[parameters('applicationGatewayTier')]",
          "capacity": "[parameters('applicationGatewayCapacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[variables('appgwSubnetRef')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[variables('appgwPublicIPRef')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort1",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort1')]"
            }
          },
          {
            "name": "appGatewayFrontendPort2",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort2')]"
            }
          },
          {
            "name": "appGatewayFrontendPort3",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort3')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": [
                {
                  "ipAddress": "[reference(variables('lbID0')).frontendIPConfigurations[0].properties.privateIPAddress]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings1",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort1')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          },
          {
            "name": "appGatewayBackendHttpSettings2",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort2')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          },
          {
            "name": "appGatewayBackendHttpSettings3",
            "properties": {
              "Port": "[parameters('loadBalancedAppPort3')]",
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener1",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendPorts/appGatewayFrontendPort1')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "appGatewayHttpListener2",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendPorts/appGatewayFrontendPort2')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          },
          {
            "name": "appGatewayHttpListener3",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appgwApplicationGatewayID'), '/frontendPorts/appGatewayFrontendPort3')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/httpListeners/appGatewayHttpListener1')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings1')]"
              }
            }
          },
          {
            "Name": "rule2",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/httpListeners/appGatewayHttpListener2')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings2')]"
              }
            }
          },
          {
            "Name": "rule3",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/httpListeners/appGatewayHttpListener3')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appgwApplicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings3')]"
              }
            }
          }
        ],
        "sslCertificates": []
      }
    },
    {
      "apiVersion": "[variables('lbApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[concat('LB','-', parameters('clusterName'),'-',parameters('vmNodeType0Name'))]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "subnet": {
                "id": "[variables('subnet0Ref')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBEAddressPool",
            "properties": {}
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPort": "[parameters('nt0fabricTcpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbProbeID0')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBHttpRule",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPort": "[parameters('nt0fabricHttpGatewayPort')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[variables('lbHttpProbeID0')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule1",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort1')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort1')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/AppPortProbe1')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule2",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort2')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort2')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/AppPortProbe2')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortLBRule3",
            "properties": {
              "backendAddressPool": {
                "id": "[variables('lbPoolID0')]"
              },
              "backendPort": "[parameters('loadBalancedAppPort3')]",
              "enableFloatingIP": "false",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPort": "[parameters('loadBalancedAppPort3')]",
              "idleTimeoutInMinutes": "5",
              "probe": {
                "id": "[concat(variables('lbID0'),'/probes/AppPortProbe3')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "FabricGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricTcpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "FabricHttpGatewayProbe",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('nt0fabricHttpGatewayPort')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe1",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort1')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe2",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort2')]",
              "protocol": "tcp"
            }
          },
          {
            "name": "AppPortProbe3",
            "properties": {
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "port": "[parameters('loadBalancedAppPort3')]",
              "protocol": "tcp"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "LoadBalancerBEAddressNatPool",
            "properties": {
              "backendPort": "3389",
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "frontendPortRangeEnd": "4500",
              "frontendPortRangeStart": "3389",
              "protocol": "tcp"
            }
          }
        ]
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('uniqueStringArray0')[copyIndex()]]",
      "location": "[parameters('computeLocation')]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      },
      "copy": {
        "name": "storageLoop",
        "count": 5
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "[variables('vmssApiVersion')]",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmNodeType0Name')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[0])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[1])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[2])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[3])]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('uniqueStringArray0')[4])]",
        "[concat('Microsoft.Network/loadBalancers/', concat('LB','-', parameters('clusterName'),'-',parameters('vmNodeType0Name')))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]"
      ],
      "properties": {
        "overprovision": "[parameters('overProvision')]",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(parameters('vmNodeType0Name'),'_ServiceFabricNode')]",
                "properties": {
                  "type": "ServiceFabricNode",
                  "autoUpgradeMinorVersion": false,
                  "protectedSettings": {
                    "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                    "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                  },
                  "publisher": "Microsoft.Azure.ServiceFabric",
                  "settings": {
                    "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                    "nodeTypeRef": "[parameters('vmNodeType0Name')]",
                    "dataPath": "D:\\\\SvcFab",
                    "durabilityLevel": "Bronze"
                  },
                  "typeHandlerVersion": "1.0"
                }
              },
              {
                "name": "[concat(parameters('vmNodeType0Name'),'OMS')]",
                "properties": {
                  "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                  "type": "MicrosoftMonitoringAgent",
                  "typeHandlerVersion": "1.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "workspaceId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename')), variables('omsApiVersion')).customerId]"
                  },
                  "protectedSettings": {
                    "workspacekey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename')), variables('omsApiVersion')).primarySharedKey]"
                  }
                }
              },
              {
                "name": "[concat('VMDiagnosticsVmExt','_vmNodeType0Name')]",
                "properties": {
                  "type": "IaaSDiagnostics",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2015-05-01-preview').key1]",
                    "storageAccountEndPoint": "https://core.windows.net/"
                  },
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "settings": {
                    "WadCfg": {
                      "DiagnosticMonitorConfiguration": {
                        "overallQuotaInMB": "50000",
                        "sinks": "applicationInsights",
                        "EtwProviders": {
                          "EtwEventSourceProviderConfiguration": [
                            {
                              "provider": "Microsoft-ServiceFabric-Actors",
                              "scheduledTransferKeywordFilter": "1",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableActorEventTable"
                              }
                            },
                            {
                              "provider": "Microsoft-ServiceFabric-Services",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricReliableServiceEventTable"
                              }
                            }
                          ],
                          "EtwManifestProviderConfiguration": [
                            {
                              "provider": "cbd93bc2-71e5-4566-b3a7-595d8eeca6e8",
                              "scheduledTransferLogLevelFilter": "Information",
                              "scheduledTransferKeywordFilter": "4611686018427387904",
                              "scheduledTransferPeriod": "PT5M",
                              "DefaultEvents": {
                                "eventDestination": "ServiceFabricSystemEventTable"
                              }
                            }
                          ]
                        }
                      },
                      "SinksConfig": {
                        "Sink": [
                          {
                            "name": "applicationInsights",
                            "ApplicationInsights": "[reference(resourceId('microsoft.insights/components', parameters('applicationInsightsName')), '2014-04-01').InstrumentationKey]"
                          }
                        ]
                      }
                    },
                    "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]"
                  },
                  "typeHandlerVersion": "1.5"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(parameters('nicName'), '-0')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "[concat(parameters('nicName'),'-',0)]",
                      "properties": {
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('lbPoolID0')]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[variables('lbNatPoolID0')]"
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnet0Ref')]"
                        }
                      }
                    }
                  ],
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[parameters('adminUsername')]",
            "computernamePrefix": "[parameters('vmNodeType0Name')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[parameters('vmImagePublisher')]",
              "offer": "[parameters('vmImageOffer')]",
              "sku": "[parameters('vmImageSku')]",
              "version": "[parameters('vmImageVersion')]"
            },
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', variables('uniqueStringArray0')[0], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[1], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[2], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[3], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]",
                "[concat('https://', variables('uniqueStringArray0')[4], '.blob.core.windows.net/', parameters('vmStorageAccountContainerName'))]"
              ],
              "name": "vmssosdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            }
          }
        }
      },
      "sku": {
        "name": "[parameters('vmNodeType0Size')]",
        "capacity": "5",
        "tier": "Standard"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "2017-07-01-preview",
      "type": "Microsoft.ServiceFabric/clusters",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('computeLocation')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
        "[resourceId('microsoft.insights/components', parameters('applicationInsightsName'))]"
      ],
      "properties": {
        "clientCertificateCommonNames": [],
        "clientCertificateThumbprints": [],
        "clusterState": "Default",
        "diagnosticsStorageAccountConfig": {
          "blobEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.blob.core.windows.net/')]",
          "protectedAccountKeyName": "StorageAccountKey1",
          "queueEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.queue.core.windows.net/')]",
          "storageAccountName": "[variables('supportLogStorageAccountName')]",
          "tableEndpoint": "[concat('https://',variables('supportLogStorageAccountName'),'.table.core.windows.net/')]"
        },
        "fabricSettings": [],
        "managementEndpoint": "[concat('http://',reference(variables('lbID0')).frontendIPConfigurations[0].properties.privateIPAddress,':',parameters('nt0fabricHttpGatewayPort'))]",
        "nodeTypes": [
          {
            "name": "[parameters('vmNodeType0Name')]",
            "applicationPorts": {
              "endPort": "[parameters('nt0applicationEndPort')]",
              "startPort": "[parameters('nt0applicationStartPort')]"
            },
            "clientConnectionEndpointPort": "[parameters('nt0fabricTcpGatewayPort')]",
            "durabilityLevel": "Bronze",
            "ephemeralPorts": {
              "endPort": "[parameters('nt0ephemeralEndPort')]",
              "startPort": "[parameters('nt0ephemeralStartPort')]"
            },
            "httpGatewayEndpointPort": "[parameters('nt0fabricHttpGatewayPort')]",
            "isPrimary": true,
            "reverseProxyEndpointPort": "[parameters('nt0reverseProxyEndpointPort')]",
            "vmInstanceCount": 5
          }
        ],
        "provisioningState": "Default",
        "reliabilityLevel": "Silver",
        "vmImage": "Windows"
      },
      "tags": {
        "resourceType": "Service Fabric",
        "clusterName": "[parameters('clusterName')]"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "dependsOn": [],
      "kind": "web",
      "location": "[parameters('appInsightsRegion')]",
      "name": "[parameters('applicationInsightsName')]",
      "properties": {
        "ApplicationId": "[parameters('applicationInsightsName')]"
      },
      "scale": null,
      "tags": {
      },
      "type": "microsoft.insights/components"
    },
    {
      "apiVersion": "[variables('omsApiVersion')]",
      "location": "[parameters('omsRegion')]",
      "name": "[parameters('omsWorkspacename')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "properties": {
        "sku": {
          "name": "Free"
        }
      },
      "resources": [
        {
          "apiVersion": "[variables('omsApiVersion')]",
          "name": "[concat(variables('applicationDiagnosticsStorageAccountName'),parameters('omsWorkspacename'))]",
          "type": "storageinsightconfigs",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename'))]",
            "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]"
          ],
          "properties": {
            "containers": [],
            "tables": [
              "WADServiceFabric*EventTable",
              "WADWindowsEventLogsTable"
            ],
            "storageAccount": {
              "id": "[resourceId('Microsoft.Storage/storageaccounts/', variables('applicationDiagnosticsStorageAccountName'))]",
              "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
            }
          }
        },
        {
          "apiVersion": "[variables('omsApiVersion')]",
          "name": "Security",
          "type": "datasources",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename'))]",
            "[concat('Microsoft.OperationsManagement/solutions/', variables('solutionsecurity'))]"
          ],
          "kind": "WindowsEvent",
          "properties": {
            "eventLogName": "Security",
            "eventTypes": [
              {
                "eventType": "Error"
              },
              {
                "eventType": "Warning"
              },
              {
                "eventType": "Information"
              }
            ]
          }
        },
        {
          "apiVersion": "[variables('omsApiVersion')]",
          "name": "System",
          "type": "datasources",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename'))]"
          ],
          "kind": "WindowsEvent",
          "properties": {
            "eventLogName": "System",
            "eventTypes": [
              {
                "eventType": "Error"
              },
              {
                "eventType": "Warning"
              },
              {
                "eventType": "Information"
              }
            ]
          }
        }
      ]
    },
    {
      "apiVersion": "[variables('omsApiVersion')]",
      "location": "[parameters('omsRegion')]",
      "name": "[variables('solution')]",
      "type": "Microsoft.OperationsManagement/solutions",
      "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.OperationsManagement/solutions/', variables('solution'))]",
      "dependsOn": [
        "[concat('Microsoft.OperationalInsights/workspaces/', parameters('OMSWorkspacename'))]"
      ],
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename'))]"
      },
      "plan": {
        "name": "[variables('solution')]",
        "publisher": "Microsoft",
        "product": "[Concat('OMSGallery/', parameters('servicefabricsolution'))]",
        "promotionCode": ""
      }
    },
    {
      "apiVersion": "[variables('omsApiVersion')]",
      "location": "[parameters('omsRegion')]",
      "name": "[variables('solutionsecurity')]",
      "type": "Microsoft.OperationsManagement/solutions",
      "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.OperationsManagement/solutions/', variables('solutionsecurity'))]",
      "dependsOn": [
        "[concat('Microsoft.OperationalInsights/workspaces/', parameters('OMSWorkspacename'))]"
      ],
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('omsWorkspacename'))]"
      },
      "plan": {
        "name": "[variables('solutionsecurity')]",
        "publisher": "Microsoft",
        "product": "[Concat('OMSGallery/', parameters('securitysolution'))]",
        "promotionCode": ""
      }
    }
  ],
    "outputs": {
      "clusterProperties": {
        "value": "[reference(parameters('clusterName'))]",
        "type": "object"
      }
    }
  }